Version Control:-By taking the help of version control, we can track the changes made to our code and use the old codebase whenever required, version control allows us to go back to the previous codebase if the correct code is not working properly.

Keeping historical copies:-This means, we keep the historical copies of all the codes as we may need that old code again.

Diffing file:-We can use the diff command line tools to take two files or two directories and show the differences between them in few formats.

Diff and patch:-

Using diff we can store the difference between two files in a .diff file.

Suppose we have file named orig.txt that need not to be  changed. So what we will do we will make two files.

One will original.txt file and another is modified.txt  file.

Step 1:- we will copy all the contents of orig.txt file to both original.txt file and modified.txt file.

Step 2:-let’ s modify the modified.txt file with all the required changes.

Step 3:-now we will make one file with .diff extension and store the difference between our modified.txt correct file and original.txt.

Command:- diff modified.txt original.txt > keep.diff.

This will reflect the changes in the keep.diff file.

Step 4:-now we will apply only required changed to our orig.txt file.

Command:-patch orig.txt < keep.diff 

This will make the only required changes In the original file without changing correct previous code.

Configuring git:-

Setting up email in git:—    
Command:-git config —global user.name “Yasir Ali”

Command:- git config —global user.email “yasir128.ali@gmail.com”

Git init:-it is used to initialize a git repository in the current directory

ls -l .git/ :- this command is used to go inside the .git directory.

The area outside the git directory is the working tree, and working tree is the current version of our current project,these working tree contains all the files that are currently tracked by git.

Git add :- this command is used to make git track our file and that means we have added our files to the staging area.
Command :- git add gitNotes.txt


Staging area:-The staging area which is also known as the index is a file maintained by Git that contains all of the information about what files and changes are going to go into your next commit.


Vim commands:-

i to enable edit mode in vim

Esc after editing 

Cmd+: after esc 

And wq then enter

To get out of git log we need to press "q".

Command to commit changes without staging them is :- git commit -a.

What is git head?

Ans:-When working with Git, only one branch can be checked out at a time - and this is what's called the "HEAD".

Git log -p :- this command is used to get the commit details including all the changes that we have made to our files before commiting.
 

Git show:- it is same as git commit -p but we need to pass the commit id to make it work same as git commit -p.

Command for git show:- git show commit_id(eced8d62a09f794f1f16679ff12a0fccf2581f9f)

Another interesting flag for git log is --stat flag.
This --stat will cause git log to show some stats about the changes in the commit like which files have changed and how many lines are added or removed.


Git add -p :- this shows us the changes that we have made to our files and asks us that whether we want to add that to the staging area or not.

Git diff --staged :- this will show us the changes that are staged but not commited.

Git rm (file_name) :- this is used to remove a file from the git repository.

How to rename files in git repository:-Git mv existing_file_name new_name_of_the file.

Undoing changes:-It will help us to revert back to file when we don't want our file with the latest changes.

Command :- git checkout file_name.

Git add * :-This is used to add all the files in the staging area except the files that starts with a dot(.)

Q.)How to revert back from the staging area?suppose you staged something but don't want to commit so how can we unstage the file?

Ans:- using command:-git restore --staged file_name.

Git restore --staged -p is used to make git ask you that which specific changes you want to unstage.

Amending commits:-

 Sometime it happens that we forgot to include something in our staging area and commits the changes.So,in order to remove that current commit, we will use "git commit --amend" to edit the last committed commit.
 Note:-Before applying the git commit --amend command, we have to include that file in staging area (after making changes and correcting it) then we will run git commit --amend then it will bring us to the last committed commit's vim editor where all the information will be shown and we can change the commit message there if we want.


Suppose we have committed some codes that making a lot of issues after deoploying.

In that case sometimes we have to rollback to our previous code to make it work as it was working before.

So, we will use revert command:-git revert HEAD.

So, after running this command, git will make one more commit that will be reverse of the current commit, so that,the old code will be committed that was working properly before.and the changes that we did (which was making issues) will be removed from the file that we committed.

Git revert commit_id:- This will help us to revert from the given commit id.

BRANCHING:
What is a branch?
A branch is a pointer to a particular commit.

The default branch that git creates for you when a new repository is initialised is called master.

Why we use branch?
First of all,every important things is basically done in master branch because the codebase that is deployed is basically situated in master branch.So,suppose we want to make some changes in our codebase without getting it affected in the deployed area, so, we will create different branches and test all the codes that we are developing and after if all the codes works successfully then we will merge those code in our branch master so that we won't have to roll back.

How to create branch?
We can use git branch command to list, create, delete,and manipulate branches.
Command:- git branch.

We use git checkout to check out the latest snapshot for both files and for branches.

COMMANDS:
How to create a branch?
Command:-git branch branch_name.

How to switch to different branch?
Command:git checkout branch_name

Note:-  (*) asterisk with green background will let us know that which branch we are current using.

How to create a new branch and move to that branch in one command?

Ans:-Using command:-git checkout -b branch_name.

How to delete a branch that we don't need?
Ans:- Using command git branch -d branch_name


Note:-If there are changes in the branch we want to delete that haven't been merged back into the master branch,git will let us know with an error.

Merging:-It is a term that git uses for combining branched data and history together.

We will use the git merge command which let us take the independent snapshots and history of one git branch and tangle them into another.

Command for merging the branch is:-Git merge branch_name.(this is a fast forward merge).

Git uses two different algorithms to perform a merge:-1)fast forward merge and 2)three way merge


GITHUB:-

Git is a distributed version control system.distributed means each developer has a copy of the whole repository on their local machine.

Git clone:-git clone is used to point to an existing repository and make a clone or copy of that repository at in a new directory at another location.

Git push:-git push command is used to upload local repository content to a remote repository.

Git pull:-git used is used to fetch and download content from remote repository and immediately update the local repository to match that content.

What is a remote repository?
Ans:-Remote repository are a big part of the distributed nature of git collaboration.It allows a lot of developers contribute to a project from their own workstation making changes to local copy of the project independently of one another.

Now we want to add new modified and deleted only to the git staging area of the project and then commit them. Basically, we want to ignore all the new files & folders. For that we will execute this command,

$ git add -u

It updates the git index by adding changes only about modification & deletion of tracked files in the project to the staging area. It skips all new files in the project.

